import matplotlib.pyplot as plt
import numpy as np
import control

data = np.array([[0.00, 0.00],
[0.00, 0.00],
[0.00, 0.12],
[0.00, 1.18],
[0.00, 2.16],
[0.01, 2.37],
[0.08, 2.08],
[0.14, 1.73],
[0.21, 1.43],
[0.28, 1.25],
[0.36, 1.11],
[0.43, 1.04],
[0.50, 1.02],
[0.56, 1.04],
[0.63, 1.05],
[0.67, 1.11],
[0.72, 1.14],
[0.76, 1.17],
[0.80, 1.21],
[0.83, 1.25],
[0.87, 1.29],
[0.89, 1.32],
[0.91, 1.37],
[0.92, 1.41],
[0.94, 1.43],
[0.96, 1.43],
[0.97, 1.45],
[0.98, 1.48],
[1.00, 1.49],
[1.00, 1.50],
[1.00, 1.53],
[1.01, 1.53],
[1.01, 1.52],
[1.01, 1.54],
[1.01, 1.54],
[1.02, 1.54],
[1.03, 1.55],
[1.03, 1.56],
[1.02, 1.58],
[1.01, 1.58],
[1.01, 1.55],
[1.02, 1.56],
[1.02, 1.57],
[1.02, 1.57],
[1.01, 1.57],
[1.01, 1.58],
[1.01, 1.56],
[1.00, 1.55],
[1.02, 1.57],
[1.01, 1.57],
[1.01, 1.56],
[0.99, 1.57],
[1.00, 1.58],
[1.00, 1.56],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.56],
[0.99, 1.59],
[0.99, 1.58],
[0.99, 1.56],
[0.99, 1.56],
[0.99, 1.56],
[0.99, 1.56],
[0.99, 1.57],
[0.98, 1.58],
[0.98, 1.57],
[0.98, 1.56],
[0.98, 1.56],
[1.00, 1.58],
[1.00, 1.57],
[0.99, 1.56],
[0.98, 1.57],
[0.99, 1.58],
[0.99, 1.56],
[0.99, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.56],
[0.99, 1.56],
[1.01, 1.57],
[1.00, 1.57],
[1.00, 1.60],
[1.00, 1.58],
[0.99, 1.56],
[0.99, 1.57],
[1.01, 1.57],
[0.99, 1.58],
[1.00, 1.60],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.56],
[1.01, 1.57],
[1.00, 1.58],
[1.00, 1.57],
[1.00, 1.56],
[1.00, 1.56],
[1.01, 1.57],
[1.00, 1.57],
[1.00, 1.56],
[1.01, 1.57],
[1.00, 1.57],
[0.99, 1.59],
[1.00, 1.58],
[1.00, 1.56],
[0.99, 1.55],
[0.99, 1.57],
[1.00, 1.58],
[1.00, 1.58],
[0.99, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.57],
[1.00, 1.56],
[0.99, 1.56],
[1.00, 1.57],
[0.99, 1.59],
[0.99, 1.58],
[0.99, 1.57],
[0.99, 1.57],
[1.00, 1.57],
[0.99, 1.58],
[0.99, 1.58],
[1.00, 1.56],
[0.99, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.58],
[0.98, 1.56],
[0.99, 1.56],
[0.99, 1.56],
[1.00, 1.58],
[1.00, 1.59],
[0.99, 1.57],
[0.99, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.58],
[1.00, 1.58],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.59],
[1.00, 1.59],
[1.00, 1.57],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.56],
[0.99, 1.57],
[1.00, 1.58],
[1.00, 1.56],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.58],
[0.99, 1.57],
[0.99, 1.56],
[0.99, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.57],
[0.99, 1.58],
[0.99, 1.58],
[1.00, 1.57],
[0.99, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.55],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.58],
[0.99, 1.56],
[0.99, 1.56],
[1.00, 1.57],
[1.00, 1.58],
[0.99, 1.60],
[0.99, 1.59],
[1.00, 1.56],
[0.99, 1.55],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.58],
[1.00, 1.57],
[1.00, 1.56],
[1.00, 1.56],
[1.01, 1.57],
[1.00, 1.58],
[1.00, 1.59],
[1.00, 1.57],
[0.99, 1.55],
[1.00, 1.56],
[1.00, 1.56],
[1.00, 1.57],
[0.98, 1.56],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.58],
[1.01, 1.58],
[1.00, 1.58],
[1.00, 1.58],
[1.00, 1.55],
[1.00, 1.58],
[1.00, 1.57],
[1.00, 1.58],
[0.99, 1.57],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.58],
[1.00, 1.57],
[0.99, 1.55],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.56],
[0.99, 1.55],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.60],
[1.00, 1.58],
[0.99, 1.55],
[0.98, 1.56],
[1.00, 1.57],
[0.99, 1.59],
[1.00, 1.59],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.58],
[1.00, 1.57],
[0.99, 1.55],
[1.00, 1.57],
[0.99, 1.55],
[1.00, 1.58],
[0.99, 1.57],
[1.01, 1.57],
[1.00, 1.57],
[0.99, 1.59],
[1.00, 1.58],
[0.99, 1.54],
[0.99, 1.57],
[1.00, 1.57],
[1.00, 1.60],
[1.00, 1.58],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.56],
[1.00, 1.57],
[1.01, 1.57],
[1.00, 1.56],
[0.99, 1.58],
[1.00, 1.57],
[0.99, 1.55],
[0.99, 1.56],
[0.99, 1.57],
[1.00, 1.58],
[0.99, 1.56],
[1.00, 1.56],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.58],
[0.99, 1.57],
[0.99, 1.56],
[0.99, 1.57],
[1.00, 1.57],
[0.99, 1.57],
[0.99, 1.57],
[1.00, 1.57],
[1.00, 1.57],
[0.99, 1.58],
[0.99, 1.57],
[0.99, 1.55],
[0.99, 1.56],
[1.00, 1.57],
[0.99, 1.59],
[0.99, 1.58],
[1.00, 1.57],
[0.99, 1.57],
[1.01, 1.57],
[1.00, 1.56],
[0.98, 1.56],
[1.00, 1.58],
[0.99, 1.56],
[0.99, 1.57],
[1.00, 1.58],
[1.00, 1.57],
[1.00, 1.57],
[1.00, 1.56],
[1.00, 1.56],
[1.00, 1.56],
[1.01, 1.57],
[1.00, 1.59],
[1.00, 1.58]])
T = 0.1
r = np.ones(len(data))
r[0] = 0
t = np.arange(0, (len(data) * T), T)
u = np.array(data[:, 1])
y = np.array(data[:, 0])
plt.plot(t, y)
plt.plot(t, u)
plt.show()

B = [0.01252623, 0.00802733, 0.01150331, -0.01177336, 0.00401554]
A = [-0.9290006981023957, -0.465000105144012, 0.07202166564893307, 0.35973520148090415]
m = len(A)
den = [0]
den[0] = 1
den.extend(A)
H = control.tf(B, den, T)
print(H)
[Y, t1] = control.step_response(H)
plt.step(Y, t1)
plt.show()

sumB = np.sum(B)
q = [0]
q[0] = 1 / ((1 - A[0]) * sumB)
q[0] = 5
print(q[0])
for it in range(0, m, 1):
    q.append((q[0] * (den[it + 1] - den[it])) + (den[it] / sumB))
q.append(den[m] * ((1 / sumB) - q[0]))
print('Vector Q:\n', q)

p = [0]
p[0] = q[0] * B[0]
for it in range(0, m - 1, 1):
    p.append((q[0] * (B[it + 1] - B[it])) + (B[it] / sumB))
p.append(-B[m - 1] * (q[0] - (1 / sumB)))
print('\nVector P:\n', p)

p = np.array(p)
p = p * (-1)
print(p)

den1 = [0]
den1[0] = 1
den1.extend(p)
D = control.tf(q, den1, T)

print('FT de D:\n', D)

polos = control.pole(D)

# Supresion de efecto timbre
print('Polos de D:\n', polos)
p1 = (polos[0] * -1) + 1
p2 = (polos[1] * -1) + 1
p3 = (polos[2] * -1) + 1

g = (p1 * p2 * p3).real
print(g)
a = polos[3].real
b = polos[4].real

numD = (q / g)
denD = [1, -a - b, a * b, 0, 0, 0]
print(numD)
print(denD)
Dn = control.tf(numD, denD, T)
print('\nFT de D sin timbre:\n', Dn)

GW = H * Dn
print(GW)

Hz = control.feedback(GW, 0.84, sign=-1)
print(Hz)
[Y1, t2] = control.step_response(Hz, t)
plt.step(Y1, t2)
#plt.plot(t, y)
plt.show()
